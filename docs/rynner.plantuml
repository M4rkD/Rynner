@startuml

RunClasses.Runnable o--> "1" RunClasses.Runner
abstract RunClasses.Runnable {
      -Runner runner
      run()
      cancel()
      label()
      started()
      submitted()
      fields()
}

RunClasses.ClusterRunnable -|> RunClasses.Runnable
class RunClasses.ClusterRunnable {
      set_template(string path)
      set_mirror_directory(string dir)
      set_sync(string dir)
}
note left of RunClasses.ClusterRunnable : "user-written plugins are\n coupled to this API. Need to specify the API that you can support?"

RunClasses.PBSHostLogic -|> RunClasses.HostLogic
RunClasses.Runner ..> RunClasses.Runnable : instantiates

InputSpecification "1" --* "1" Plugin
InputSpecification *-- "1.." InputFieldBase
RunValidationException <.. Plugin : throws (create_run)
class Plugin {
      -func<InputData, Runner, plugin_runner_logic> create_run
      -InputSpecification input_specification
      -dict{label, Runner[],dict{runner_data}>} runners
      init(func create_run,\n       dict|InputSpecification input_spec,\n        Runner[] runners = None,\n        <Runner> supported_runnners=[abstract_base_class, abc_for_custom_class])
      add_action(string label, func action)
      Runnable[] running()
      QConfigManager config_manager()
      InputSpecification input_specification()
}

Qt.QRunningView -> Qt.QRunnableConfigDialog : parent
class Qt.QRunningView {

}

abstract RunClasses.Runner {
         __init__(runner_config_file)
         Runnable runnable()
}

abstract RunClasses.ClusterRunner {
         new_serial_runnable()
}

RunClasses.ClusterRunner -|> RunClasses.Runner
RunClasses.AWSRunner -|> RunClasses.Runner

RunClasses.SunbirdRunner o-- RunClasses.SlurmHostLogic
RunClasses.HawkRunner o-- RunClasses.SlurmHostLogic
RunClasses.SlurmHostLogic -|> RunClasses.HostLogic
RunClasses.ClusterRunner <|-- RunClasses.SunbirdRunner
class RunClasses.SlurmHostLogic {
      run(runnable)
}

RunClasses.HostLogic o-- RunClasses.RemoteFileManager
class RunClasses.RemoteFileManager {
      String read_text_file(path)
      write_text_file(path, contents)
      run_command(path, contents)
      sync_files(path, contents)
}

RunClasses.ClusterRunner <|-- RunClasses.HawkRunner

class RunClasses.SunbirdRunner <<Plugin>>
class RunClasses.HawkRunner << (O,orchid) Instance of ClusterRunner - Plugin>>

Plugin ..> InputData
Qt.QRunnableConfigDialog *--> "0.." Qt.QInputField

class InputData {
      +example_property
      +example_property2
      +example_property3
}

class InputSpecification {
      -callable<InputData> validator
      init(dict config_dict, validator=None)
      InputData validate(InputData)
      QInputField[] widgets()
}

note right of InputFieldBase : "everything is\ntightly coupled to Qt"

InputSpecification ..> InputData

Qt.QRunningView *-- Qt.QRunningStandardModel
Qt.QRunnableConfigDialog *-- Qt.QRunnableConfigModel
Qt.QRunnableConfigModel "1" o-- "1" InputSpecification
Qt.QRunnableConfigModel <.. Qt.QInputField : signal
class Qt.QRunnableConfigDialog {
      init(InputSpecification spec)
}

Qt.QRunnableConfigDialog "1" *--> "1" Qt.QConfigLayoutManager
class Qt.QConfigLayoutManager {
      layout(QWidget canvas)
}

class Qt.QRunningStandardModel {
      init(available_runners, Plugin[] run_types)
}

Qt.QRunnableConfigModel ..> Qt.QRunnableConfigDialog : signal
class Qt.QRunnableConfigModel {
      +QtSignal value_error<key, error_msg, value>
      +QtSignal spec_error<key, error_msg, value>
      init(InputSpecification config)
      bool is_valid()
      set_value(key, value)
}

Qt.QRunningStandardModel "1" *--- "1.." RunClasses.Runner
Qt.QRunningStandardModel .. Plugin

abstract InputFieldBase {
         -func<value> is_valid
         init(func<value> is_valid)
         QInputField qwidget()
}

note bottom of Qt.QInputField : "value_changed only emitted on valid value"
abstract Qt.QInputField {
         + QtSignal value_changed<key, value>
         + callable<~> sanitiser
         value()
}

Qt.QTextField -|> Qt.QInputField
InputFieldBase -|> TextInputField

class RunValidationException

InputFieldBase .. Qt.QInputField : constructs

note top of RunClasses.ClusterRunnable : "strongly coupled: needs to preserve interface for all compatible runners"

note right of InputSpecification : "subclass to change behaviour"
@enduml
